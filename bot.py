
from telebot import TeleBot, types
from oauth2client.service_account import ServiceAccountCredentials
import gspread
from datetime import datetime
import time
import os
from flask import Flask, request
TOKEN = os.environ.get("TOKEN")
bot = TeleBot(TOKEN)

APP_URL = "https://tablytsabot.onrender.com"  # URL –Ω–∞ Render
WEBHOOK_PATH = f"/{TOKEN}"  # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å

app = Flask(__name__)

@app.route(WEBHOOK_PATH, methods=["POST"])
def webhook():
    json_str = request.get_data().decode("UTF-8")
    update = types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "!", 200

@app.route("/", methods=["GET"])
def index():
    return "Bot is running!", 200

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
SPREADSHEET_NAME = "–¢–∞–±–ª–∏—Ü–∞ –º–∞—Ä—à—Ä—É—Ç–Ω–∞—è"
user_sessions = {}

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–µ ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
client = gspread.authorize(creds)
spreadsheet = client.open(SPREADSHEET_NAME)

def get_machine_list():
    try:
        sheet = spreadsheet.worksheet("–õ–∏—Å—Ç1")
        return sheet.col_values(10)[1:]
    except:
        return []

def ensure_machine_sheet(name):
    try:
        return spreadsheet.worksheet(name)
    except:
        ws = spreadsheet.add_worksheet(title=name, rows="100", cols="10")
        ws.append_row(["–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "–í–æ–¥–∏—Ç–µ–ª—å", "–õ–∏—Ç—Ä—ã", "–û–¥–æ–º–µ—Ç—Ä", "–†–∞—Å—Ö–æ–¥ (–ª/100 –∫–º)"])
        return ws

# === –ö–æ–º–∞–Ω–¥—ã ===
@bot.message_handler(commands=["start"])
def start(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    bot.register_next_step_handler(message, save_name)

def save_name(message):
    chat_id = message.chat.id
    name = message.text.strip()
    user_sessions[chat_id] = {"name": name}
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üöõ –ù–∞—á–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç")
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@bot.message_handler(func=lambda msg: msg.text == "üöõ –ù–∞—á–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç")
def begin_route(message):
    chat_id = message.chat.id
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for m in get_machine_list():
        keyboard.add(m)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É:", reply_markup=keyboard)

@bot.message_handler(func=lambda msg: msg.text in get_machine_list())
def choose_machine(message):
    chat_id = message.chat.id
    user_sessions[chat_id]["machine"] = message.text
    hide_keyboard = types.ReplyKeyboardRemove()
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –æ–¥–æ–º–µ—Ç—Ä–∞:", reply_markup=hide_keyboard)
    bot.register_next_step_handler(message, save_odometer_start)

def save_odometer_start(message):
    chat_id = message.chat.id
    odometer = message.text.strip()
    now = datetime.now()
    user = user_sessions[chat_id]
    user["start_time"] = now.strftime("%H:%M:%S")
    user["date"] = now.strftime("%Y-%m-%d")
    user["odometer_start"] = odometer

    ws = spreadsheet.worksheet("–õ–∏—Å—Ç1")
    last_row = len(ws.col_values(1)) + 1
    ws.update(f"A{last_row}", [[
        user["date"],        # A ‚Äî –î–∞—Ç–∞
        user["name"],        # B ‚Äî –í–æ–¥–∏—Ç–µ–ª—å
        user["machine"],     # C ‚Äî –ú–∞—à–∏–Ω–∞
        user["start_time"],  # D ‚Äî –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∞
        odometer,            # E ‚Äî –ù–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞ (–æ–¥–æ–º–µ—Ç—Ä)
        "",                  # F ‚Äî –í—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –º–∞—Ä—à—Ä—É—Ç–∞
        "",                  # G ‚Äî –ö–æ–Ω–µ—Ü –º–∞—Ä—à—Ä—É—Ç–∞ (–æ–¥–æ–º–µ—Ç—Ä)
        ""                   # H ‚Äî –ü—Ä–æ–±–µ–≥ (–∫–º)
    ]])


    hide_keyboard = types.ReplyKeyboardRemove()
    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–ø–∏–¥–æ–º–µ—Ç—Ä–∞.", reply_markup=hide_keyboard)
    user["waiting_for_photo"] = "start_odometer_photo"


@bot.message_handler(func=lambda msg: msg.text == "‚õΩ –ó–∞–ø—Ä–∞–≤–∫–∞")
def refuel_odometer(message):
    chat_id = message.chat.id
    hide_keyboard = types.ReplyKeyboardRemove()
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –æ–¥–æ–º–µ—Ç—Ä–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–∞–≤–∫–æ–π:", reply_markup=hide_keyboard)
    bot.register_next_step_handler(message, save_refuel_odometer)

def save_refuel_odometer(message):
    chat_id = message.chat.id
    user = user_sessions[chat_id]
    user["refuel_odometer"] = message.text.strip()
    
    hide_keyboard = types.ReplyKeyboardRemove()
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ç—Ä–æ–≤ –∑–∞–ø—Ä–∞–≤–∫–∏:", reply_markup=hide_keyboard)
    bot.register_next_step_handler(message, save_refuel_liters)

def save_refuel_liters(message):
    chat_id = message.chat.id
    user = user_sessions[chat_id]
    liters = message.text.strip()
    sheet = ensure_machine_sheet(user["machine"])
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –ª–∏—Å—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–∞—à–∏–Ω—ã
    rows = sheet.get_all_values()
    if len(rows) >= 2:  # –ï—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–ø–∏—Å—å
        last_odometer = int(rows[-1][3])  # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ–¥–æ–º–µ—Ç—Ä
        current_odometer = int(user["refuel_odometer"])
        distance = current_odometer - last_odometer
        if distance > 0:
            consumption = round((float(liters) / distance) * 100, 2)
        else:
            consumption = "–û—à–∏–±–∫–∞"
    else:
        distance = ""
        consumption = ""

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π, –≤–æ–¥–∏—Ç–µ–ª–µ–º, –ª–∏—Ç—Ä–∞–º–∏, –æ–¥–æ–º–µ—Ç—Ä–æ–º –∏ —Ä–∞—Å—Ö–æ–¥–æ–º
    sheet.append_row([now, user["name"], liters, user["refuel_odometer"], str(consumption)])

    hide_keyboard = types.ReplyKeyboardRemove()
    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–∞–ø—Ä–∞–≤–∫–∏.", reply_markup=hide_keyboard)
    user["waiting_for_photo"] = "refuel_photo"


@bot.message_handler(func=lambda msg: msg.text == "üèÅ –ö–æ–Ω–µ—Ü –º–∞—Ä—à—Ä—É—Ç–∞")
def end_route(message):
    chat_id = message.chat.id
    hide_keyboard = types.ReplyKeyboardRemove()
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –æ–¥–æ–º–µ—Ç—Ä–∞ –≤ –∫–æ–Ω—Ü–µ –º–∞—Ä—à—Ä—É—Ç–∞:", reply_markup=hide_keyboard)
    bot.register_next_step_handler(message, save_odometer_end)

def save_odometer_end(message):
    chat_id = message.chat.id
    odometer_end = message.text.strip()
    user = user_sessions[chat_id]
    now = datetime.now()
    time_end = now.strftime("%H:%M:%S")
    mileage = int(odometer_end) - int(user["odometer_start"])

    ws = spreadsheet.worksheet("–õ–∏—Å—Ç1")
    records = ws.get_all_values()
    for i in range(len(records)-1, 0, -1):
        if records[i][0] == user["date"] and records[i][1] == user["name"] and records[i][2] == user["machine"]:
            ws.update(f"F{i+1}", [[time_end]])
            ws.update(f"G{i+1}", [[odometer_end]])
            ws.update(f"H{i+1}", [[str(mileage)]])
            break

    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å–∏–º —Ñ–æ—Ç–æ –∏ –∂–¥—ë–º
    hide_keyboard = types.ReplyKeyboardRemove()
    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–¥–æ–º–µ—Ç—Ä–∞ –≤ –∫–æ–Ω—Ü–µ –º–∞—Ä—à—Ä—É—Ç–∞.", reply_markup=hide_keyboard)
    user["waiting_for_photo"] = "end_odometer_photo"

@bot.message_handler(func=lambda msg: msg.text == "üì¶ –ù–æ–≤–∞—è –ø–æ—á—Ç–∞")
def nova_poshta_branch(message):
    chat_id = message.chat.id
    reply_markup = types.ReplyKeyboardRemove()
    bot.send_message(chat_id, "–ù–∞ –∫–∞–∫–æ–º –æ—Ç–¥–µ–ª–µ–Ω–∏–∏ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?", reply_markup=reply_markup)
    user_sessions[chat_id]["state"] = "awaiting_branch"

@bot.message_handler(func=lambda msg: user_sessions.get(msg.chat.id, {}).get("state") == "awaiting_branch")
def save_branch_and_ask_action(message):
    chat_id = message.chat.id
    user = user_sessions[chat_id]
    user["branch"] = message.text.strip()
    user["state"] = "awaiting_nova_poshta_action"

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ", "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞", "‚ùå –ù–µ—Ç –ø–æ—á—Ç—ã")
    keyboard.add("üîô –ù–∞–∑–∞–¥")

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@bot.message_handler(func=lambda msg: msg.text == "üì• –ü–æ–ª—É—á–µ–Ω–∏–µ")
def nova_poshta_receive(message):
    chat_id = message.chat.id
    user = user_sessions.get(chat_id)
    if not user or user.get("state") != "awaiting_nova_poshta_action":
        return
    
    reply_markup = types.ReplyKeyboardRemove()
    bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –ø–æ—Å—ã–ª–æ–∫ –ø–æ–ª—É—á–µ–Ω–æ?", reply_markup=reply_markup)
    user["state"] = "awaiting_receive_count"

@bot.message_handler(func=lambda msg: user_sessions.get(msg.chat.id, {}).get("state") == "awaiting_receive_count")
def save_receive_count(message):
    chat_id = message.chat.id
    user = user_sessions[chat_id]
    user["receive_count"] = message.text.strip()
    user["state"] = "awaiting_receive_photo"
    user["waiting_for_photo"] = "nova_receive"

    reply_markup = types.ReplyKeyboardRemove()
    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ—Å—ã–ª–æ–∫.", reply_markup=reply_markup)

@bot.message_handler(func=lambda msg: msg.text == "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞")
def nova_poshta_send(message):
    chat_id = message.chat.id
    user = user_sessions.get(chat_id)
    if not user or user.get("state") != "awaiting_nova_poshta_action":
        return

    reply_markup = types.ReplyKeyboardRemove()
    bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –ø–æ—Å—ã–ª–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ?", reply_markup=reply_markup)
    user["state"] = "awaiting_send_count"

@bot.message_handler(func=lambda msg: user_sessions.get(msg.chat.id, {}).get("state") == "awaiting_send_count")
def save_send_count(message):
    chat_id = message.chat.id
    user = user_sessions[chat_id]
    user["send_count"] = message.text.strip()
    user["state"] = "awaiting_send_photo"
    user["waiting_for_photo"] = "nova_send"

    reply_markup = types.ReplyKeyboardRemove()
    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ—Å—ã–ª–æ–∫.", reply_markup=reply_markup)

@bot.message_handler(content_types=["photo"])
def handle_photo(message):
    chat_id = message.chat.id
    user = user_sessions.get(chat_id)
    if not user:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    if user.get("waiting_for_photo") == "start_odometer_photo":
        file_id = message.photo[-1].file_id
        group_chat_id = -1002734636283
        caption = f"üì∏ –§–æ—Ç–æ –æ–¥–æ–º–µ—Ç—Ä–∞ *–≤ –Ω–∞—á–∞–ª–µ –º–∞—Ä—à—Ä—É—Ç–∞* –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è {user['name']}"
        bot.send_photo(group_chat_id, file_id, caption=caption)

        user.pop("waiting_for_photo", None)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("‚õΩ –ó–∞–ø—Ä–∞–≤–∫–∞", "üèÅ –ö–æ–Ω–µ—Ü –º–∞—Ä—à—Ä—É—Ç–∞", "üì¶ –ù–æ–≤–∞—è –ø–æ—á—Ç–∞")
        bot.send_message(chat_id, "–ú–∞—Ä—à—Ä—É—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        return

    elif user.get("waiting_for_photo") == "end_odometer_photo":
        file_id = message.photo[-1].file_id
        group_chat_id = -1002734636283
        caption = f"üì∏ –§–æ—Ç–æ –æ–¥–æ–º–µ—Ç—Ä–∞ *–≤ –∫–æ–Ω—Ü–µ –º–∞—Ä—à—Ä—É—Ç–∞* –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è {user['name']}"
        bot.send_photo(group_chat_id, file_id, caption=caption)

        user.pop("waiting_for_photo", None)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("üöõ –ù–∞—á–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç")
        bot.send_message(chat_id, "–ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        return

    elif user.get("waiting_for_photo") == "refuel_photo":
        file_id = message.photo[-1].file_id
        group_chat_id = -1002734636283
        caption = f"‚õΩ –§–æ—Ç–æ –∑–∞–ø—Ä–∞–≤–∫–∏ –æ—Ç {user['name']} (–º–∞—à–∏–Ω–∞: {user['machine']})"
        bot.send_photo(group_chat_id, file_id, caption=caption)

        user.pop("waiting_for_photo", None)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("‚õΩ –ó–∞–ø—Ä–∞–≤–∫–∞", "üèÅ –ö–æ–Ω–µ—Ü –º–∞—Ä—à—Ä—É—Ç–∞", "üì¶ –ù–æ–≤–∞—è –ø–æ—á—Ç–∞")
        bot.send_message(chat_id, "–ó–∞–ø—Ä–∞–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        return

        return

    # === –ù–û–í–ê –ü–û–®–¢–ê ‚Äî –ü–û–õ–£–ß–ï–ù–ò–ï ===
    elif user.get("waiting_for_photo") == "nova_receive":
        file_id = message.photo[-1].file_id
        group_chat_id = -1002780836350
        caption = f"üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ\nüë§ –í–æ–¥–∏—Ç–µ–ª—å: {user.get('name')}\nüè¢ –û—Ç–¥–µ–ª–µ–Ω–∏–µ: {user.get('branch')}\nüì¶ –ö–æ–ª-–≤–æ –ø–æ—Å—ã–ª–æ–∫: {user.get('receive_count')}"
        bot.send_photo(group_chat_id, file_id, caption=caption)

        user.pop("waiting_for_photo", None)
        user["state"] = None

        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –º–∞—Ä—à—Ä—É—Ç–∞
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("‚õΩ –ó–∞–ø—Ä–∞–≤–∫–∞", "üèÅ –ö–æ–Ω–µ—Ü –º–∞—Ä—à—Ä—É—Ç–∞", "üì¶ –ù–æ–≤–∞—è –ø–æ—á—Ç–∞")
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

    # === –ù–û–í–ê –ü–û–®–¢–ê ‚Äî –û–¢–ü–†–ê–í–ö–ê ===
    elif user.get("waiting_for_photo") == "nova_send":
        file_id = message.photo[-1].file_id
        group_chat_id = -1002780836350
        caption = f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞\nüë§ –í–æ–¥–∏—Ç–µ–ª—å: {user.get('name')}\nüè¢ –û—Ç–¥–µ–ª–µ–Ω–∏–µ: {user.get('branch')}\nüì¶ –ö–æ–ª-–≤–æ –ø–æ—Å—ã–ª–æ–∫: {user.get('send_count')}"
        bot.send_photo(group_chat_id, file_id, caption=caption)

        user.pop("waiting_for_photo", None)
        user["state"] = None

        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –º–∞—Ä—à—Ä—É—Ç–∞
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("‚õΩ –ó–∞–ø—Ä–∞–≤–∫–∞", "üèÅ –ö–æ–Ω–µ—Ü –º–∞—Ä—à—Ä—É—Ç–∞", "üì¶ –ù–æ–≤–∞—è –ø–æ—á—Ç–∞")
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@bot.message_handler(func=lambda msg: msg.text == "‚ùå –ù–µ—Ç –ø–æ—á—Ç—ã")
def nova_poshta_cancel(message):
    chat_id = message.chat.id
    user = user_sessions.get(chat_id)

    if not user or user.get("state") != "awaiting_nova_poshta_action":
        return

    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    group_chat_id = -1002780836350
    text = (
        f"‚ùå –ü–æ—á—Ç–∞ *–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç*\n"
        f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {user.get('name')}\n"
        f"üè¢ –û—Ç–¥–µ–ª–µ–Ω–∏–µ: {user.get('branch')}"
    )
    bot.send_message(group_chat_id, text, parse_mode="Markdown")

    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user["state"] = None

    # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –º–∞—Ä—à—Ä—É—Ç–∞
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("‚õΩ –ó–∞–ø—Ä–∞–≤–∫–∞", "üèÅ –ö–æ–Ω–µ—Ü –º–∞—Ä—à—Ä—É—Ç–∞", "üì¶ –ù–æ–≤–∞—è –ø–æ—á—Ç–∞")
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

bot.remove_webhook()
bot.set_webhook(url=APP_URL + "/" + TOKEN)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))

